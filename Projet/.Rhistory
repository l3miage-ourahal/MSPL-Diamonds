knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
# on commence par lire les données
diamonds_data <- read_delim("./data/diamonds_data.csv",delim=",");
# on ignore la premiere variable car elle est inutile (c'est un index)
diamonds_data <- diamonds_data %>% select(-1)
# Filtre les x, y et z pour ne garder que ceux qui ont une valeur > 0
diamonds_data <- diamonds_data %>%
filter(x > 0 & y > 0 & z > 0)
# On créé un histogramme avec le prix en abscisse et en ordonnée la quantité de diamants
ggplot(diamonds_data, aes(x = price)) +
geom_histogram(fill = "steelblue", color = "white") + # Créé l'histogramme avec des barres bleu et des bordures blanches
scale_x_continuous(limits = c(300, 19000), breaks = seq(0, 19000, 2000)) + # Set la valeur max de l'abscisse de 0 à 19000 avec une marque tout les 2000 et des barres de 300 de large
labs(
title = "Répartition du prix des diamants",
x = "Prix ($)",
y = "Nombre de diamants"
) +
theme_minimal(base_size = 16)
# Graph linéaire (courbe) pour estimer le prix moyen des diamants en fonction de leur carats.
# Créé une intervalle personalisée incrémentant de +0.5 de  0 à 4.1 avec un saut final jusqu'au carat maximum à la fin
breaks <- c(seq(0.1, 4.1, by = 0.5), max(diamonds_data$carat) + 0.1)
diamonds_data %>%
mutate(carat_bin = cut(carat, breaks = breaks, include.lowest = TRUE)) %>%
group_by(carat_bin) %>%
summarise(mean_price = mean(price)) %>%
ggplot(aes(x = carat_bin, y = mean_price, group = 1)) +
geom_line(color = "blue", linewidth = 2) +  # courbe bleue avec une largeur de 2
labs(
title = "Prix moyen de diamants en fonction du carat",
x = "Carat",
y = "Prix moyen ($)"
) +
theme_minimal(base_size = 15)
# Intervalle personnalisé par incrémentation de +0.2 entre 0.2 et carat maximum +0.2
breaks <- seq(0.2, max(diamonds_data$carat)+0.2, by = 0.2)
# Diagramme en bar avec en abscisse l'intervalle de carat et en ordonnée le nombre de diamants pour ce carat
diamonds_data %>%
mutate(carat_bin = cut(carat, breaks = breaks, include.lowest = TRUE)) %>%
group_by(carat_bin) %>%
summarise(count = n()) %>%
ggplot(aes(x = carat_bin, y = count)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(
title = "Nombre de diamants par tranche de carat",
x = "Tranche de carat",
y = "Nombre de diamants"
) +
theme_minimal(base_size = 14) +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) # ajuste l'angle des valeurs pour que ça rentre
# Récupère uniquement les carats entre 0.9 et 1.1 et ordonne les type de coupe de la pire à la meilleure
diamonds_filtered <- diamonds_data %>%
filter(carat >= 0.9 & carat <= 1.1) %>%
mutate(cut = fct_relevel(cut, "Fair", "Good", "Very Good", "Premium", "Ideal"))
# Boxplot
ggplot(diamonds_filtered, aes(x = cut, y = price)) +
geom_boxplot(fill = "lightblue") +
labs(
title = "Prix selon la qualité de coupe (à carat ~1)",
x = "Qualité de coupe",
y = "Prix ($)"
) +
theme_minimal(base_size = 15)
# Récupère uniquement les carats entre 0.9 et 1.1 et ordonne les couleurs de la pire à la meilleure
diamonds_filtered <- diamonds_data %>%
filter(carat >= 0.9 & carat <= 1.1) %>%
mutate(color = fct_relevel(color, "J", "I", "H", "G", "F", "E", "D"))
# Boxplot
ggplot(diamonds_filtered, aes(x = color, y = price)) +
geom_boxplot(fill = "lightblue") +
labs(
title = "Prix selon la couleur (à carat  ~1)",
x = "Couleur",
y = "Prix ($)"
) +
theme_minimal(base_size = 15)
# Récupère uniquement les carats entre 0.9 et 1.1 et ordonne les clarities de la pire à la meilleure
diamonds_filtered <- diamonds_data %>%
filter(carat >= 0.9 & carat <= 1.1) %>%
mutate(clarity = fct_relevel(clarity, "I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF"))
# Boxplot
ggplot(diamonds_filtered, aes(x = clarity, y = price)) +
geom_boxplot(fill = "lightblue") +
labs(
title = "Prix selon la clarté (à carat  ~1)",
x = "Clarté",
y = "Prix ($)"
) +
theme_minimal(base_size = 15)
