---
title: "MSPL project: Diamands" 
author: "Lilian Ouraha, Doriane Richard, Reza Roudoci, Ahmed Ben Nacib"
date: "May 20, 2025"
output: pdf_document
---

## Table of content

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## Introduction
This is student project of MSPL using datas found on kaggle about diamonds.
The goal of this project is to find the main factor that determine the price of a diamond between several one such as it's carat, it's color, it's width...




We first start by reading the input data
```{r, echo = FALSE}
library(tidyverse)
library(ggplot2)
diamonds_data <- read_delim("./data/diamonds_data.csv",delim=",");

# Ignore the first variable because it's useless (an index)
diamonds_data <- diamonds_data %>% select(-1)

# filter the x y and z variables only keeping the one greater than 0
diamonds_data <- diamonds_data %>%
  filter(x > 0 & y > 0 & z > 0)

#diamonds_data %>% arrange(desc(carat)) %>% head(10)
# diamonds_data 
```


Now we create an histogram depending of the price 

```{r, echo = FALSE}
ggplot(diamonds_data, aes(x = price)) +
  geom_histogram(fill = "steelblue", color = "white") + # Draws the histogram with bars of width 500 filled with steel blue and white borders
  scale_x_continuous(limits = c(300, 19000), breaks = seq(0, 19000, 2000)) + # Sets the X-axis limits (from 300 to 19,000) and tick marks every 2000
  labs(
    title = "Répartition du prix des diamants",
    x = "Prix ($)",
    y = "Nombre de diamants"
  ) +
  theme_minimal(base_size = 16)
```

Linear model to estimate the overall trend depending of the carat using  
```{r, echo = FALSE}
# Create personalised intervals: 0 → 4.1 incrementing of 0.5, then a final jump until the maximum
breaks <- c(seq(0.1, 4.1, by = 0.5), max(diamonds_data$carat) + 0.1)

diamonds_data %>%
  mutate(carat_bin = cut(carat, breaks = breaks, include.lowest = TRUE)) %>%
  group_by(carat_bin) %>%
  summarise(mean_price = mean(price)) %>%
  ggplot(aes(x = carat_bin, y = mean_price, group = 1)) +
  geom_line(color = "blue", size = 1) + 
  labs(
    title = "Prix moyen de diamants en fonction du carat",
    x = "Carat",
    y = "Prix moyen ($)"
  ) +
  theme_minimal(base_size = 15)

```
Show the frequence of differents types of cut depending on the price
```{r, echo = FALSE}

breaks <- c(seq(0, 18000, by = 2000), 19000)#price born

labels <- paste(head(breaks, -1), breaks[-1], sep = " - ") # personalised label to avoid scientific writing

diamonds_data %>%
  mutate(price_bin = cut(price, breaks = breaks, include.lowest = TRUE, labels = labels)) %>%
  mutate(cut = fct_relevel(cut, "Fair", "Good", "Very Good", "Premium", "Ideal")) %>%  # Organize the different cuts
  group_by(price_bin, cut) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(price_bin) %>%
  mutate(percentage = count / sum(count) * 100) %>% 
  ggplot(aes(x = price_bin, y = percentage, fill = cut)) +
  geom_bar(stat = "identity", position = "stack") +
  labs(
    title = "Répartition des types de coupes en fonction du prix",
    x = "Tranches de prix ($)",
    y = "Pourcentage du type de coupe",
    fill = "Coupe"
  ) +
  theme_minimal(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # adjust the text angle to make it fit

```

```{r, echo = FALSE}
breaks <- c(seq(0, 18000, by = 2000), 19000)#price born

labels <- paste(head(breaks, -1), breaks[-1], sep = " - ") # personalised label to avoid scientific writing

diamonds_data %>%
  mutate(price_bin = cut(price, breaks = breaks, include.lowest = TRUE, labels = labels)) %>%
  mutate(clarity = fct_relevel(clarity, "I1", "SI2", "SI1", "VS2", "VS1", "VVS2", "VVS1", "IF")) %>%  # Organize the different clarities
  group_by(price_bin, clarity) %>%
  summarise(count = n(), .groups = "drop") %>%
  group_by(price_bin) %>%
  mutate(percentage = count / sum(count) * 100) %>%
  ggplot(aes(x = price_bin, y = percentage, fill = clarity)) +
  geom_bar(stat = "identity", position = "stack") +
  labs( 
    title = "Répartition des types de clarity en fonction du prix",
    x = "Tranches de prix ($)",
    y = "Pourcentage du type de clarity",
    fill = "Clarities"
  ) +
  theme_minimal(base_size = 15) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) # adjust the text angle to make it fit

```


